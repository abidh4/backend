const mongoose = require("mongoose");

const ExamRegistrationRequestSchema = new mongoose.Schema({
  examType: {
    type: String,
    required: [true, "Exam type is required"],
    enum: ["Semester Final", "Improvement", "F-Removal"],
  },
  rollNumber: {
    type: String,
    required: [true, "Roll number is required"],
  },
  eMail: {
    type: String,
    required: [true, "Email is required"],
    match: [/.+@.+\..+/, "Please enter a valid email address"],
  },
  semester: {
    type: Number,
    required: [true, "Semester is required"],
  },
  courses: {
    type: [String],
    required: [true, "At least one course must be selected"],
    validate: {
      validator: function(arr) {
        return arr.length > 0 && arr.length <= 12;
      },
      message: "Must select between 1 and 12 courses"
    }
  },
  payableAmount: {
    type: Number,
    required: true,
    default: 5000,
    min: [0, "Payable amount cannot be negative"]
  },
  trxID: {
    type: String,
    required: [true, "Transaction ID is required"],
  },
  status: {
    type: String,
    enum: ["Pending", "Approved", "Rejected"],
    default: "Pending",
  },
  date: {
    type: Date,
    default: Date.now,
  },
});

// Optional: create a compound index to prevent duplicate registrations
ExamRegistrationRequestSchema.index({ rollNumber: 1, examType: 1, semester: 1 }, { unique: true });

module.exports = mongoose.model("ExamRegistrationRequest", ExamRegistrationRequestSchema);
